openapi: 3.0.3

info:
  title: WebhookX Admin API
  contact:
    name: WebhookX
    url: https://github.com/webhookx-io/webhookx
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.7.0

servers:
  - url: http://localhost:8080

paths:
  /:
    get:
      summary: Get WebhookX information
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    type: string
              example:
                version: 1.0.0

  /workspaces:
    get:
      parameters:
        - $ref: "#/components/parameters/page_no"
        - $ref: "#/components/parameters/page_size"
      summary: Page workspaces
      tags:
        - Workspace
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Pagination"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Workspace"
    post:
      summary: Create a workspace
      tags:
        - Workspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workspace"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"

  /workspaces/{id}:
    get:
      summary: Retrieve a workspace
      tags:
        - Workspace
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
    put:
      summary: Update a workspace
      tags:
        - Workspace
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workspace"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
    delete:
      summary: Delete a workspace
      tags:
        - Workspace
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted

  /workspaces/{ws_id}/endpoints:
    parameters:
      - $ref: "#/components/parameters/workspace_id"

    get:
      parameters:
        - $ref: "#/components/parameters/page_no"
        - $ref: "#/components/parameters/page_size"
      summary: Page endpoints
      tags:
        - Endpoint
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Pagination"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Endpoint"
    post:
      tags:
        - Endpoint
      summary: Create a endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Endpoint"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Endpoint"

  /workspaces/{ws_id}/endpoints/{id}:
    parameters:
      - $ref: "#/components/parameters/workspace_id"

    get:
      summary: Retrieve a endpoint
      tags:
        - Endpoint
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Endpoint"
    put:
      summary: Update a endpoint
      tags:
        - Endpoint
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Endpoint"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Endpoint"

    delete:
      summary: Delete a endpoint
      tags:
        - Endpoint
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted

  /workspaces/{ws_id}/attempts:
    parameters:
      - $ref: "#/components/parameters/workspace_id"

    get:
      parameters:
        - $ref: "#/components/parameters/page_no"
        - $ref: "#/components/parameters/page_size"
        - in: query
          name: event_id
          schema:
            type: string
        - in: query
          name: endpoint_id
          schema:
            type: string

      summary: Page webhook attempts
      tags:
        - Attempt
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Pagination"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Attempt"

  /workspaces/{ws_id}/attempts/{id}:
    parameters:
      - $ref: "#/components/parameters/workspace_id"

    get:
      summary: Retrieve a webhook attempt
      tags:
        - Attempt
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Attempt"

  /workspaces/{ws_id}/events:
    parameters:
      - $ref: "#/components/parameters/workspace_id"

    get:
      parameters:
        - $ref: "#/components/parameters/page_no"
        - $ref: "#/components/parameters/page_size"
      summary: Page events
      tags:
        - Event
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Pagination"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Event"

    post:
      summary: Create an event
      tags:
        - Event
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"

  /workspaces/{ws_id}/events/{id}:
    parameters:
      - $ref: "#/components/parameters/workspace_id"

    get:
      summary: Retrieve an event
      tags:
        - Event
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"

  /workspaces/{ws_id}/events/{id}/retry:
    parameters:
      - $ref: "#/components/parameters/workspace_id"

    post:
      summary: Manually retry an event
      tags:
        - Event
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: endpoint_id
          required: true
          schema:
            type: string

      responses:
        "200":
          description: OK

  /workspaces/{ws_id}/sources:
    parameters:
      - $ref: "#/components/parameters/workspace_id"

    get:
      parameters:
        - $ref: "#/components/parameters/page_no"
        - $ref: "#/components/parameters/page_size"
      summary: Page sources
      tags:
        - Source
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Pagination"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Source"
    post:
      summary: Create a source
      tags:
        - Source
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Source"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Source"

  /workspaces/{ws_id}/source/{id}:
    parameters:
      - $ref: "#/components/parameters/workspace_id"

    get:
      summary: Retrieve a source
      tags:
        - Source
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Source"
    put:
      summary: Update a source
      tags:
        - Source
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Source"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Source"
    delete:
      summary: Delete a source
      tags:
        - Source
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted

  /workspaces/{ws_id}/plugins:
    parameters:
      - $ref: "#/components/parameters/workspace_id"

    get:
      parameters:
        - $ref: "#/components/parameters/page_no"
        - $ref: "#/components/parameters/page_size"
      summary: Page plugins
      tags:
        - Plugin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Pagination"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Plugin"
    post:
      summary: Create a plugin
      tags:
        - Plugin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Plugin"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plugin"

  /workspaces/{ws_id}/plugins/{id}:
    parameters:
      - $ref: "#/components/parameters/workspace_id"

    get:
      summary: Retrieve a plugin
      tags:
        - Plugin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plugin"
    put:
      summary: Update a plugin
      tags:
        - Plugin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Plugin"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Plugin"
    delete:
      summary: Delete a plugin
      tags:
        - Plugin
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Deleted

  /workspaces/{ws_id}/config/sync:
    post:
      parameters:
        - $ref: "#/components/parameters/workspace_id"
      summary: Sync declarative configuration
      tags:
        - Declarative
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Configuration"
          application/x-yaml:
            schema:
              $ref: "#/components/schemas/Configuration"
      responses:
        "200":
          description: OK

  /workspaces/{ws_id}/config/dump:
    post:
      parameters:
        - $ref: "#/components/parameters/workspace_id"
      summary: Dump declarative configuration
      tags:
        - Declarative
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string

  /debug/pprof/:
    get:
      summary: Responds the pprof html page listing the available profiles
      tags:
        - Debug
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                type: string

  /debug/pprof/{profile}:
    get:
      summary: Responds a specific pprof profile
      tags:
        - Debug
      parameters:
        - in: path
          name: profile
          required: true
          schema:
            type: string
            enum: [ allocs, block, goroutine, heap, mutex, threadcreate, cmdline, symbol, profile, trace ]
      responses:
        "200":
          description: OK

components:
  parameters:
    workspace_id:
      in: path
      name: ws_id
      required: true
      schema:
        type: string
        example: "default"
      description: The workspace id
    page_no:
      in: query
      name: page_no
      schema:
        type: integer
        default: 1
    page_size:
      in: query
      name: page_size
      schema:
        type: integer
        default: 20
  responses:
    NotFound:
      description: The resource was not found

    NotContent:
      description: The resource has been successfully deleted or the resource didn't exist

  schemas:
    Pagination:
      properties:
        total:
          type: integer
          example: 1

    Metadata:
      type: object
      additionalProperties:
        type: string
      default: {}

    Workspace:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        metadata:
          $ref: "#/components/schemas/Metadata"
        created_at:
          type: integer
          readOnly: true
        updated_at:
          type: integer
          readOnly: true


    Endpoint:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        enabled:
          type: boolean
          default: true
        request:
          type: object
          default:
            method: POST
            headers: null
            timeout: 10000
          properties:
            url:
              type: string
              minLength: 1
              example: https://example.com
            method:
              type: string
              enum: [ GET, POST, PUT, DELETE, PATCH ]
              default: "POST"
            headers:
              type: object
              nullable: true
              additionalProperties:
                type: string
              default: null
            timeout:
              type: integer
              minimum: 0
              maximum: 60000
              default: 10000
          required:
            - url
        retry:
          type: object
          default:
            strategy: fixed
            config:
              attempts: [ 0, 60, 3600 ]
          properties:
            strategy:
              type: string
              enum: [ fixed ]
              default: fixed
            config:
              type: object
              default:
                attempts: [ 0, 60, 3600 ]
              properties:
                attempts:
                  type: array
                  minItems: 1
                  items:
                    type: integer
                    minimum: 0
                  default: [ 0, 60, 3600 ]
        events:
          type: array
          items:
            type: string
            example: foo.bar
          default: []
        metadata:
          $ref: "#/components/schemas/Metadata"
        created_at:
          type: integer
          readOnly: true
        updated_at:
          type: integer
          readOnly: true

    Attempt:
      type: object
      properties:
        id:
          type: string
        event_id:
          type: string
        endpoint_id:
          type: string
        status:
          type: string
          enum: [ INIT, QUEUED, SUCCESSFUL, FAILED, CANCELED ]
        attempt_number:
          type: integer
        scheduled_at:
          type: integer
        attempted_at:
          type: integer
          nullable: true
        trigger_mode:
          type: string
          enum: [ INITIAL, MANUAL, AUTOMATIC ]
        exhausted:
          type: boolean
        error_code:
          type: string
          nullable: true
          enum: [ TIMEOUT, UNKNOWN, ENDPOINT_DISABLED, ENDPOINT_NOT_FOUND ]
        request:
          type: object
          nullable: true
          properties:
            method:
              type: string
            url:
              type: string
            headers:
              type: object
              nullable: true
            body:
              type: string
              nullable: true
        response:
          type: object
          nullable: true
          properties:
            status:
              type: number
            latency:
              type: integer
              description: "Latancy of response in milliseconds"
            headers:
              type: object
              nullable: true
            body:
              type: string
              nullable: true
        created_at:
          type: integer
          readOnly: true
        updated_at:
          type: integer
          readOnly: true

    Event:
      type: object
      properties:
        id:
          type: string
        event_type:
          type: string
        data:
          type: object
        ingested_at:
          type: integer
          description: "The time the event was ingested"
        created_at:
          type: integer
          readOnly: true
        updated_at:
          type: integer
          readOnly: true
      required:
        - event_type
        - data

    Source:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
          nullable: true
        enabled:
          type: boolean
          default: true
        path:
          type: string
        methods:
          type: array
          items:
            type: string
            enum: [ GET, POST, PUT, DELETE, PATCH ]
          minItems: 1
        async:
          type: boolean
          description: "Whether to ingest events asynchronously through the queue"
          default: false
        response:
          type: object
          nullable: true
          properties:
            code:
              type: integer
              minimum: 200
              maximum: 599
            content_type:
              type: string
            body:
              type: string
          required:
            - code
            - content_type
        metadata:
          $ref: "#/components/schemas/Metadata"
        created_at:
          type: integer
          readOnly: true
        updated_at:
          type: integer
          readOnly: true
      required:
        - path
        - methods

    Plugin:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        enabled:
          type: boolean
          default: true
        endpoint_id:
          type: string
          nullable: true
        source_id:
          type: string
          nullable: true
        config:
          type: object
          nullable: true
        metadata:
          $ref: "#/components/schemas/Metadata"
        created_at:
          type: integer
          readOnly: true
        updated_at:
          type: integer
          readOnly: true

    Configuration:
      type: object
      properties:
        endpoints:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Endpoint"
              - type: object
                properties:
                  plugins:
                    type: array
                    items:
                      $ref: "#/components/schemas/Plugin"
        sources:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/Source"
              - type: object
                properties:
                  plugins:
                    type: array
                    items:
                      $ref: "#/components/schemas/Plugin"
