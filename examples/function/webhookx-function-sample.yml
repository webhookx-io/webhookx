endpoints:
  - name: default-endpoint
    request:
      url: https://httpbin.org/anything
      method: POST
      timeout: 10000
      headers:
        x-apikey: secret
    retry:
      strategy: fixed
      config:
        attempts: [0, 3600, 3600]
    events: [ "charge.succeeded" ]

sources:
  - name: github-source
    path: /github
    methods: [ "POST" ]
    response:
      code: 200
      content_type: application/json
      body: '{"message": "OK"}'
    plugins:
      - name: function
        config:
          function: |
            function handle() {
              // verify signature
              var bytes = webhookx.utils.hmac('SHA-256', "secret", webhookx.request.getBody())
              var signature = "sha256=" + webhookx.utils.encode('hex', bytes)
              var signatureHeader = webhookx.request.getHeader("X-Hub-Signature-256")
              console.log(signature)
              if (!webhookx.utils.timingSafeEqual(signature, signatureHeader)) {
                webhookx.response.exit(400, { 'Content-Type': 'application/json' }, { message: 'invalid signature' })
              }
              // transform payload
              try {
                var obj = JSON.parse(webhookx.request.getBody())
                var eventType = webhookx.request.getHeader('X-GitHub-Event') + "." + obj.action
                webhookx.request.setBody(JSON.stringify({ event_type: eventType, data: obj }))
              } catch(e) {
                console.log(e)
                webhookx.response.exit(400, { 'Content-Type': 'application/json' }, { message: 'Invalid JSON' })
              }
            }

  - name: stripe-source
    path: /stripe
    methods: [ "POST" ]
    response:
      code: 200
      content_type: application/json
      body: '{"message": "OK"}'
    plugins:
      - name: function
        config:
          function: |
            function parse(header) {
                let parsed = {
                    timestamp: 0,
                    signatures: [],
                }
                
                let parts = header.split(',')
                for (let i = 0; i < parts.length; i++) {
                    let part = parts[i]
                    if (part.startsWith('t=')) {
                        parsed.timestamp = part.split('=')[1];
                    } else if (part.startsWith("v1=")) {
                        parsed.signatures.push(part.split('=')[1])
                    }
                }
            
                return parsed
            }
            
            function handle() {
                // verify Stripe signature
                let parsed = parse(webhookx.request.getHeader("Stripe-Signature"))
              
                var signedPayload = `${parsed.timestamp}.${webhookx.request.getBody()}`
                var bytes = webhookx.utils.hmac('SHA-256', "whsec_yoursecret", signedPayload)
                var exceptedSignature = webhookx.utils.encode('hex', bytes)
            
                var valid = false
                for (let signature of parsed.signatures) {
                    if (webhookx.utils.timingSafeEqual(exceptedSignature, signature)) {
                        valid = true
                        break
                    }
                }
                if (!valid) {
                    webhookx.response.exit(400, {'Content-Type': 'application/json'}, {message: 'Invalid Signature'})
                    return
                }
            
                // transform payload
                try {
                    var obj = JSON.parse(webhookx.request.getBody())
                    webhookx.request.setBody(JSON.stringify({event_type: obj.type, data: obj}))
                } catch (e) {
                    console.log(e)
                    webhookx.response.exit(400, {'Content-Type': 'application/json'}, {message: 'Invalid JSON'})
                }
            }
