// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/taskqueue/queue.go
//
// Generated by this command:
//
//	mockgen --source ../pkg/taskqueue/queue.go --destination mocks/queue.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	taskqueue "github.com/webhookx-io/webhookx/pkg/taskqueue"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskQueue is a mock of TaskQueue interface.
type MockTaskQueue struct {
	ctrl     *gomock.Controller
	recorder *MockTaskQueueMockRecorder
}

// MockTaskQueueMockRecorder is the mock recorder for MockTaskQueue.
type MockTaskQueueMockRecorder struct {
	mock *MockTaskQueue
}

// NewMockTaskQueue creates a new mock instance.
func NewMockTaskQueue(ctrl *gomock.Controller) *MockTaskQueue {
	mock := &MockTaskQueue{ctrl: ctrl}
	mock.recorder = &MockTaskQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskQueue) EXPECT() *MockTaskQueueMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTaskQueue) Add(ctx context.Context, tasks []*taskqueue.TaskMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, tasks)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTaskQueueMockRecorder) Add(ctx, tasks any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTaskQueue)(nil).Add), ctx, tasks)
}

// Delete mocks base method.
func (m *MockTaskQueue) Delete(ctx context.Context, task *taskqueue.TaskMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskQueueMockRecorder) Delete(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskQueue)(nil).Delete), ctx, task)
}

// Get mocks base method.
func (m *MockTaskQueue) Get(ctx context.Context, opts *taskqueue.GetOptions) ([]*taskqueue.TaskMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, opts)
	ret0, _ := ret[0].([]*taskqueue.TaskMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskQueueMockRecorder) Get(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskQueue)(nil).Get), ctx, opts)
}

// Size mocks base method.
func (m *MockTaskQueue) Size(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Size indicates an expected call of Size.
func (mr *MockTaskQueueMockRecorder) Size(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockTaskQueue)(nil).Size), ctx)
}
